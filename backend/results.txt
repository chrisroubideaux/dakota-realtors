node_modules\axios\package.json:    "build": "gulp clear && cross-env NODE_ENV=production rollup -c -m",
node_modules\config\lib\config.js:    CONFIG_DIR, NODE_ENV, APP_INSTANCE,
node_modules\config\lib\config.js:    CONFIG_SKIP_GITCRYPT, NODE_ENV_VAR_NAME,
node_modules\config\lib\config.js: * (deployment) is the deployment type, found in the $NODE_ENV environment
node_modules\config\lib\config.js:  var node_env_var_names = ['NODE_CONFIG_ENV', 'NODE_ENV'];
node_modules\config\lib\config.js:  for (const node_env_var_name of node_env_var_names) {
node_modules\config\lib\config.js:    NODE_ENV = util.initParam(node_env_var_name);
node_modules\config\lib\config.js:    if (!!NODE_ENV) {
node_modules\config\lib\config.js:      NODE_ENV_VAR_NAME = node_env_var_name;
node_modules\config\lib\config.js:  if (!NODE_ENV) {
node_modules\config\lib\config.js:    NODE_ENV = 'development';
node_modules\config\lib\config.js:  node_env_var_names.forEach(node_env_var_name => {
node_modules\config\lib\config.js:    env[node_env_var_name] = NODE_ENV;
node_modules\config\lib\config.js:  NODE_ENV = NODE_ENV.split(',');
node_modules\config\lib\config.js:  var baseNames = ['default'].concat(NODE_ENV);
node_modules\config\lib\config.js:    NODE_ENV.forEach(function(env) {
node_modules\config\lib\config.js:  NODE_ENV.forEach(function(env) {
node_modules\config\lib\config.js:// Run strictness checks on NODE_ENV and NODE_APP_INSTANCE and throw an error if there's a problem.
node_modules\config\lib\config.js:  NODE_ENV.forEach(function(env) {
node_modules\config\lib\config.js:    // Throw an exception if there's no explicit config file for NODE_ENV
node_modules\config\lib\config.js:      _warnOrThrow(NODE_ENV_VAR_NAME+" value of '"+env+"' did not match any deployment config file names.");
node_modules\config\lib\config.js:    // Throw if NODE_ENV matches' default' or 'local'
node_modules\config\lib\config.js:      _warnOrThrow(NODE_ENV_VAR_NAME+" value of '"+env+"' is ambiguous.");
node_modules\emoji-regex\package.json:    "build": "rm -rf -- es2015; babel src -d .; NODE_ENV=es2015 babel src -d ./es2015; node script/inject-sequences.js",
node_modules\express\lib\application.js:  var env = process.env.NODE_ENV || 'development';
node_modules\express-session\index.js:var env = process.env.NODE_ENV;
node_modules\finalhandler\index.js:  var env = opts.env || process.env.NODE_ENV || 'development'
node_modules\smart-buffer\package.json:    "test": "NODE_ENV=test mocha --recursive --require ts-node/register test/**/*.ts",
node_modules\smart-buffer\package.json:    "coverage": "NODE_ENV=test nyc npm test",
node_modules\smart-buffer\package.json:    "coveralls": "NODE_ENV=test nyc npm test && nyc report --reporter=text-lcov | coveralls",
node_modules\socks\package.json:    "test": "NODE_ENV=test mocha --recursive --require ts-node/register test/**/*.ts",
